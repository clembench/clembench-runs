{
  "game_id": 14,
  "variant": "basic",
  "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can tedne. To tedne is to get something into one's hands, possession or control.\n\nYour goal for this game is: Put the ramiced on the table, the book on the derman and the plate on the derman.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
  "initial_state": [
    "at(kitchen1floor1,kitchen1)",
    "at(pantry1floor1,pantry1)",
    "at(hallway1floor1,hallway1)",
    "at(livingroom1floor1,livingroom1)",
    "at(logal1floor1,logal1)",
    "at(bedroom1floor1,bedroom1)",
    "at(table1,livingroom1)",
    "at(sidetable1,livingroom1)",
    "at(counter1,kitchen1)",
    "at(refrigerator1,pantry1)",
    "at(cupboard1,kitchen1)",
    "at(wardrobe1,bedroom1)",
    "at(shelf1,livingroom1)",
    "at(freezer1,pantry1)",
    "at(pottedplant1,hallway1)",
    "at(chair1,livingroom1)",
    "at(bed1,bedroom1)",
    "at(derman1,livingroom1)",
    "at(broom1,logal1)",
    "at(mop1,logal1)",
    "at(sandwich1,pantry1)",
    "at(apple1,pantry1)",
    "at(banana1,pantry1)",
    "at(orange1,pantry1)",
    "at(sulphy1,pantry1)",
    "at(plate1,kitchen1)",
    "at(book1,bedroom1)",
    "at(ramiced1,bedroom1)",
    "at(player1,bedroom1)",
    "type(kitchen1floor1,floor)",
    "type(pantry1floor1,floor)",
    "type(hallway1floor1,floor)",
    "type(livingroom1floor1,floor)",
    "type(logal1floor1,floor)",
    "type(bedroom1floor1,floor)",
    "type(player1,player)",
    "type(table1,table)",
    "type(sidetable1,sidetable)",
    "type(counter1,counter)",
    "type(refrigerator1,refrigerator)",
    "type(cupboard1,cupboard)",
    "type(wardrobe1,wardrobe)",
    "type(shelf1,shelf)",
    "type(freezer1,freezer)",
    "type(pottedplant1,pottedplant)",
    "type(chair1,chair)",
    "type(bed1,bed)",
    "type(derman1,derman)",
    "type(broom1,broom)",
    "type(mop1,mop)",
    "type(sandwich1,sandwich)",
    "type(apple1,apple)",
    "type(banana1,banana)",
    "type(orange1,orange)",
    "type(sulphy1,sulphy)",
    "type(plate1,plate)",
    "type(book1,book)",
    "type(ramiced1,ramiced)",
    "room(kitchen1,kitchen)",
    "room(pantry1,pantry)",
    "room(hallway1,hallway)",
    "room(livingroom1,livingroom)",
    "room(logal1,logal)",
    "room(bedroom1,bedroom)",
    "support(kitchen1floor1)",
    "support(pantry1floor1)",
    "support(hallway1floor1)",
    "support(livingroom1floor1)",
    "support(logal1floor1)",
    "support(bedroom1floor1)",
    "support(table1)",
    "support(sidetable1)",
    "support(counter1)",
    "support(shelf1)",
    "support(chair1)",
    "support(bed1)",
    "support(derman1)",
    "on(ramiced1,bed1)",
    "on(book1,bedroom1floor1)",
    "on(plate1,kitchen1floor1)",
    "on(mop1,logal1floor1)",
    "on(broom1,logal1floor1)",
    "on(pottedplant1,hallway1floor1)",
    "container(refrigerator1)",
    "container(cupboard1)",
    "container(wardrobe1)",
    "container(freezer1)",
    "in(sulphy1,refrigerator1)",
    "in(orange1,refrigerator1)",
    "in(banana1,refrigerator1)",
    "in(apple1,refrigerator1)",
    "in(sandwich1,refrigerator1)",
    "exit(kitchen1,pantry1)",
    "exit(kitchen1,livingroom1)",
    "exit(kitchen1,hallway1)",
    "exit(pantry1,kitchen1)",
    "exit(hallway1,kitchen1)",
    "exit(hallway1,logal1)",
    "exit(livingroom1,kitchen1)",
    "exit(logal1,hallway1)",
    "exit(bedroom1,hallway1)",
    "exit(hallway1,bedroom1)",
    "receptacle(table1)",
    "receptacle(sidetable1)",
    "receptacle(counter1)",
    "receptacle(refrigerator1)",
    "receptacle(cupboard1)",
    "receptacle(wardrobe1)",
    "receptacle(shelf1)",
    "receptacle(freezer1)",
    "receptacle(chair1)",
    "receptacle(bed1)",
    "receptacle(derman1)",
    "openable(refrigerator1)",
    "openable(cupboard1)",
    "openable(wardrobe1)",
    "openable(freezer1)",
    "closed(refrigerator1)",
    "closed(cupboard1)",
    "closed(wardrobe1)",
    "closed(freezer1)",
    "takeable(pottedplant1)",
    "takeable(broom1)",
    "takeable(mop1)",
    "takeable(sandwich1)",
    "takeable(apple1)",
    "takeable(banana1)",
    "takeable(orange1)",
    "takeable(sulphy1)",
    "takeable(plate1)",
    "takeable(book1)",
    "takeable(ramiced1)",
    "movable(pottedplant1)",
    "movable(broom1)",
    "movable(mop1)",
    "movable(sandwich1)",
    "movable(apple1)",
    "movable(banana1)",
    "movable(orange1)",
    "movable(sulphy1)",
    "movable(plate1)",
    "movable(book1)",
    "movable(ramiced1)",
    "needs_support(pottedplant1)",
    "needs_support(broom1)",
    "needs_support(mop1)",
    "needs_support(sandwich1)",
    "needs_support(apple1)",
    "needs_support(banana1)",
    "needs_support(orange1)",
    "needs_support(sulphy1)",
    "needs_support(plate1)",
    "needs_support(book1)",
    "needs_support(ramiced1)"
  ],
  "goal_state": [
    "on(ramiced1,table1)",
    "on(book1,derman1)",
    "on(plate1,derman1)"
  ],
  "max_turns": 50,
  "optimal_turns": 13,
  "optimal_solution": [
    [
      "take",
      "ramiced1"
    ],
    [
      "take",
      "book1"
    ],
    [
      "go",
      "hallway1"
    ],
    [
      "go",
      "kitchen1"
    ],
    [
      "take",
      "plate1"
    ],
    [
      "go",
      "livingroom1"
    ],
    [
      "put",
      "book1",
      "derman1"
    ],
    [
      "go",
      "kitchen1"
    ],
    [
      "go",
      "livingroom1"
    ],
    [
      "put",
      "ramiced1",
      "table1"
    ],
    [
      "go",
      "kitchen1"
    ],
    [
      "go",
      "livingroom1"
    ],
    [
      "put",
      "plate1",
      "derman1"
    ]
  ],
  "optimal_commands": [
    "take ramiced",
    "take book",
    "go hallway",
    "go kitchen",
    "take plate",
    "go living room",
    "put book on derman",
    "go kitchen",
    "go living room",
    "put ramiced on table",
    "go kitchen",
    "go living room",
    "put plate on derman"
  ],
  "action_definitions": [
    {
      "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
      "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
      "pddl_parameter_mapping": {
        "?e": [
          "arg1"
        ],
        "?r": [
          "current_player_room"
        ],
        "?p": [
          "player"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "{{ e }} is not openable.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ],
          [
            "The {{ e }} is not closed.",
            "entity_state_mismatch"
          ]
        ]
      },
      "success_feedback": "The {{ e }} is now open. {{ container_content }}",
      "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
      "epistemic": true,
      "pragmatic": true,
      "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
      "type_name": "open"
    },
    {
      "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
      "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
      "pddl_parameter_mapping": {
        "?e": [
          "arg1"
        ],
        "?r": [
          "current_player_room"
        ],
        "?p": [
          "player"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "{{ e }} is not openable.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ],
          [
            "The {{ e }} is not open.",
            "entity_state_mismatch"
          ]
        ]
      },
      "success_feedback": "The {{ e }} is now closed.",
      "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
      "epistemic": false,
      "pragmatic": false,
      "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
      "type_name": "close"
    },
    {
      "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"tedne\" WS",
      "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
      "pddl_parameter_mapping": {
        "?e": [
          "arg1"
        ],
        "?s": [
          "arg2",
          "arg1_receptacle"
        ],
        "?p": [
          "player"
        ],
        "?i": [
          "inventory"
        ],
        "?r": [
          "current_player_room"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "{{ e }} is not takeable.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ s }} is not a receptacle.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ i }} is not an inventory. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ],
          [
            "The {{ e }} is already in your inventory.",
            "entity_already_inventory"
          ],
          [
            "You can't see a {{ s }} here.",
            "entity_not_accessible"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ],
          [
            "The {{ e }} is not on the {{ s }}.",
            "entity_state_mismatch"
          ],
          [
            "The {{ s }} is not a support.",
            "entity_trait_mismatch"
          ],
          [
            "The {{ s }} is not open.",
            "entity_state_mismatch"
          ],
          [
            "The {{ s }} is not a container.",
            "entity_trait_mismatch"
          ],
          [
            "The {{ e }} is not in the {{ s }}.",
            "entity_state_mismatch"
          ]
        ]
      },
      "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
      "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
      "epistemic": false,
      "pragmatic": true,
      "explanation": "To tedne is to get something into one's hands, possession or control.",
      "new_word": "tedne",
      "type_name": "take"
    },
    {
      "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
      "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
      "pddl_parameter_mapping": {
        "?e": [
          "arg1"
        ],
        "?t": [
          "arg2"
        ],
        "?p": [
          "player"
        ],
        "?i": [
          "inventory"
        ],
        "?r": [
          "current_player_room"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "{{ e }} is not moveable.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ t }} is not a receptacle.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ i }} is not an inventory. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ],
          [
            "You can't see a {{ t }} here.",
            "entity_not_accessible"
          ],
          [
            "The {{ t }} is not a container.",
            "entity_trait_mismatch"
          ],
          [
            "The {{ t }} is not open.",
            "entity_state_mismatch"
          ],
          [
            "The {{ t }} is not a support.",
            "entity_trait_mismatch"
          ]
        ]
      },
      "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
      "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
      "epistemic": false,
      "pragmatic": true,
      "explanation": "To VERB is to physically place something somewhere.",
      "type_name": "put"
    },
    {
      "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
      "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
      "pddl_parameter_mapping": {
        "?c": [
          "current_player_room"
        ],
        "?d": [
          "arg1"
        ],
        "?p": [
          "player"
        ],
        "?i": [
          "inventory"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "{{ c }} is not a room.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ d }} is not a room.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ i }} is not an inventory. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You are already in the {{ d }}.",
            "going_to_current_room"
          ],
          [
            "You can't go to a {{ d }} from here.",
            "no_exit_to"
          ]
        ]
      },
      "success_feedback": "{{ room_desc }}",
      "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
      "epistemic": true,
      "pragmatic": true,
      "explanation": "To VERB is to move through space, especially to a place.",
      "type_name": "go"
    },
    {
      "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
      "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
      "pddl_parameter_mapping": {
        "?p": [
          "player"
        ],
        "?r": [
          "current_player_room"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ]
        ]
      },
      "success_feedback": "You consider yourself done.",
      "asp": "",
      "epistemic": false,
      "pragmatic": true,
      "explanation": "To VERB is to end the game.",
      "type_name": "done"
    },
    {
      "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
      "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
      "pddl_parameter_mapping": {
        "?p": [
          "player"
        ],
        "?r": [
          "current_player_room"
        ],
        "?e": [
          "arg1"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ e }} is not an entity. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ],
          [
            "Your inventory is not an entity. (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ]
        ]
      },
      "success_feedback": "{{ arg1_desc }}",
      "asp": "",
      "epistemic": true,
      "pragmatic": false,
      "explanation": "To VERB is to observe or inspect carefully.",
      "type_name": "examine"
    },
    {
      "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
      "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
      "pddl_parameter_mapping": {
        "?p": [
          "player"
        ],
        "?r": [
          "current_player_room"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ]
        ]
      },
      "success_feedback": "{{ room_desc }}",
      "asp": "",
      "epistemic": true,
      "pragmatic": false,
      "explanation": "To VERB is to inspect a room.",
      "type_name": "look"
    }
  ],
  "room_definitions": [
    {
      "repr_str": "kitchen",
      "standard_content": [
        "refrigerator",
        "counter",
        "table"
      ],
      "exit_targets": [
        "pantry",
        "livingroom",
        "hallway"
      ],
      "max_connections": 3,
      "type_name": "kitchen"
    },
    {
      "repr_str": "pantry",
      "standard_content": [
        "refrigerator",
        "shelf",
        "freezer"
      ],
      "exit_targets": [
        "kitchen",
        "hallway"
      ],
      "max_connections": 1,
      "type_name": "pantry"
    },
    {
      "repr_str": "hallway",
      "standard_content": [
        "pottedplant"
      ],
      "exit_targets": [
        "kitchen",
        "pantry",
        "livingroom",
        "logal"
      ],
      "max_connections": 4,
      "type_name": "hallway"
    },
    {
      "repr_str": "living room",
      "standard_content": [
        "pottedplant",
        "table",
        "chair",
        "derman"
      ],
      "exit_targets": [
        "kitchen",
        "hallway"
      ],
      "max_connections": 2,
      "type_name": "livingroom"
    },
    {
      "repr_str": "logal",
      "standard_content": [
        "broom"
      ],
      "exit_targets": [
        "hallway"
      ],
      "max_connections": 1,
      "type_name": "logal"
    },
    {
      "repr_str": "bedroom",
      "standard_content": [
        "bed",
        "wardrobe"
      ],
      "exit_targets": [
        "livingroom",
        "hallway"
      ],
      "max_connections": 1,
      "type_name": "bedroom"
    }
  ],
  "entity_definitions": [
    {
      "repr_str": "you",
      "hidden": true,
      "traits": [],
      "type_name": "player"
    },
    {
      "repr_str": "inventory",
      "hidden": true,
      "container": true,
      "traits": [
        "container",
        "receptacle"
      ],
      "type_name": "inventory"
    },
    {
      "repr_str": "floor",
      "hidden": true,
      "support": true,
      "traits": [
        "support",
        "receptacle"
      ],
      "type_name": "floor"
    },
    {
      "repr_str": "table",
      "support": true,
      "traits": [
        "support",
        "receptacle"
      ],
      "possible_adjs": [
        "wooden",
        "metal",
        "low",
        "high"
      ],
      "standard_locations": [
        "kitchen",
        "livingroom"
      ],
      "type_name": "table"
    },
    {
      "repr_str": "side table",
      "support": true,
      "traits": [
        "support",
        "receptacle"
      ],
      "possible_adjs": [
        "wooden",
        "metal",
        "small"
      ],
      "standard_locations": [
        "livingroom",
        "bedroom"
      ],
      "type_name": "sidetable"
    },
    {
      "repr_str": "counter",
      "support": true,
      "traits": [
        "support",
        "receptacle"
      ],
      "possible_adjs": [
        "wooden",
        "metal",
        "low",
        "high"
      ],
      "standard_locations": [
        "kitchen"
      ],
      "type_name": "counter"
    },
    {
      "repr_str": "refrigerator",
      "container": true,
      "openable": true,
      "traits": [
        "container",
        "openable",
        "receptacle"
      ],
      "possible_adjs": [
        "large",
        "fancy"
      ],
      "standard_locations": [
        "kitchen",
        "pantry"
      ],
      "type_name": "refrigerator"
    },
    {
      "repr_str": "cupboard",
      "container": true,
      "openable": true,
      "traits": [
        "container",
        "openable",
        "receptacle"
      ],
      "possible_adjs": [
        "wooden",
        "metal",
        "large",
        "fancy"
      ],
      "standard_locations": [
        "kitchen"
      ],
      "type_name": "cupboard"
    },
    {
      "repr_str": "wardrobe",
      "container": true,
      "openable": true,
      "traits": [
        "container",
        "openable",
        "receptacle"
      ],
      "possible_adjs": [
        "wooden",
        "large",
        "fancy"
      ],
      "standard_locations": [
        "bedroom"
      ],
      "type_name": "wardrobe"
    },
    {
      "repr_str": "shelf",
      "support": true,
      "traits": [
        "support",
        "receptacle"
      ],
      "possible_adjs": [
        "wooden",
        "metal",
        "low",
        "high"
      ],
      "standard_locations": [
        "kitchen",
        "pantry",
        "livingroom"
      ],
      "type_name": "shelf"
    },
    {
      "repr_str": "freezer",
      "container": true,
      "openable": true,
      "traits": [
        "container",
        "openable",
        "receptacle"
      ],
      "possible_adjs": [
        "large",
        "deep"
      ],
      "standard_locations": [
        "pantry"
      ],
      "type_name": "freezer"
    },
    {
      "repr_str": "potted plant",
      "takeable": true,
      "movable": true,
      "supported": true,
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "possible_adjs": [
        "large",
        "small"
      ],
      "standard_locations": [
        "livingroom",
        "hallway",
        "bedroom"
      ],
      "type_name": "pottedplant"
    },
    {
      "repr_str": "chair",
      "support": true,
      "traits": [
        "support",
        "receptacle"
      ],
      "possible_adjs": [
        "comfy",
        "wooden",
        "padded"
      ],
      "standard_locations": [
        "livingroom"
      ],
      "type_name": "chair"
    },
    {
      "repr_str": "bed",
      "support": true,
      "traits": [
        "support",
        "receptacle"
      ],
      "possible_adjs": [
        "comfy",
        "wooden"
      ],
      "standard_locations": [
        "bedroom"
      ],
      "type_name": "bed"
    },
    {
      "repr_str": "derman",
      "support": true,
      "traits": [
        "support",
        "receptacle"
      ],
      "possible_adjs": [
        "comfy",
        "wooden",
        "padded"
      ],
      "standard_locations": [
        "livingroom"
      ],
      "type_name": "derman"
    },
    {
      "repr_str": "broom",
      "takeable": true,
      "movable": true,
      "supported": true,
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "logal"
      ],
      "type_name": "broom"
    },
    {
      "repr_str": "mop",
      "takeable": true,
      "movable": true,
      "supported": true,
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "logal"
      ],
      "type_name": "mop"
    },
    {
      "repr_str": "sandwich",
      "takeable": true,
      "movable": true,
      "supported": true,
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "kitchen",
        "pantry"
      ],
      "type_name": "sandwich"
    },
    {
      "repr_str": "apple",
      "takeable": true,
      "movable": true,
      "supported": true,
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "kitchen",
        "pantry"
      ],
      "type_name": "apple"
    },
    {
      "repr_str": "banana",
      "takeable": true,
      "movable": true,
      "supported": true,
      "possible_adjs": [
        "ripe",
        "jelly"
      ],
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "kitchen",
        "pantry"
      ],
      "type_name": "banana"
    },
    {
      "repr_str": "orange",
      "takeable": true,
      "movable": true,
      "supported": true,
      "possible_adjs": [
        "ripe",
        "fresh"
      ],
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "kitchen",
        "pantry"
      ],
      "type_name": "orange"
    },
    {
      "repr_str": "sulphy",
      "takeable": true,
      "movable": true,
      "supported": true,
      "possible_adjs": [
        "ripe",
        "fresh"
      ],
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "kitchen",
        "pantry"
      ],
      "type_name": "sulphy"
    },
    {
      "repr_str": "plate",
      "takeable": true,
      "movable": true,
      "supported": true,
      "possible_adjs": [
        "ceramic",
        "glass"
      ],
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "kitchen"
      ],
      "type_name": "plate"
    },
    {
      "repr_str": "book",
      "takeable": true,
      "movable": true,
      "supported": true,
      "possible_adjs": [
        "old",
        "thin"
      ],
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "livingroom",
        "bedroom"
      ],
      "type_name": "book"
    },
    {
      "repr_str": "ramiced",
      "takeable": true,
      "movable": true,
      "supported": true,
      "possible_adjs": [
        "down",
        "small"
      ],
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "bedroom"
      ],
      "type_name": "ramiced"
    }
  ],
  "domain_definitions": [
    {
      "domain_id": "partial_new_words",
      "types": {
        "room": [
          "kitchen",
          "pantry",
          "hallway",
          "livingroom",
          "logal",
          "bedroom"
        ],
        "entity": [
          "player",
          "inventory",
          "floor",
          "player",
          "inventory",
          "floor",
          "table",
          "sidetable",
          "counter",
          "refrigerator",
          "cupboard",
          "wardrobe",
          "shelf",
          "freezer",
          "pottedplant",
          "chair",
          "bed",
          "derman",
          "broom",
          "mop",
          "sandwich",
          "apple",
          "banana",
          "orange",
          "sulphy",
          "plate",
          "book",
          "ramiced"
        ],
        "container": [
          "inventory",
          "refrigerator",
          "cupboard",
          "wardrobe",
          "freezer"
        ],
        "receptacle": [
          "inventory",
          "floor",
          "table",
          "sidetable",
          "counter",
          "refrigerator",
          "cupboard",
          "wardrobe",
          "shelf",
          "freezer",
          "chair",
          "bed",
          "derman"
        ],
        "support": [
          "floor",
          "table",
          "sidetable",
          "counter",
          "shelf",
          "chair",
          "bed",
          "derman"
        ],
        "openable": [
          "refrigerator",
          "cupboard",
          "wardrobe",
          "freezer"
        ],
        "takeable": [
          "pottedplant",
          "broom",
          "mop",
          "sandwich",
          "apple",
          "banana",
          "orange",
          "sulphy",
          "plate",
          "book",
          "ramiced"
        ],
        "movable": [
          "pottedplant",
          "broom",
          "mop",
          "sandwich",
          "apple",
          "banana",
          "orange",
          "sulphy",
          "plate",
          "book",
          "ramiced"
        ],
        "needs_support": [
          "pottedplant",
          "broom",
          "mop",
          "sandwich",
          "apple",
          "banana",
          "orange",
          "sulphy",
          "plate",
          "book",
          "ramiced"
        ]
      },
      "predicates": [
        {
          "predicate_id": "open",
          "variable": "e",
          "mutability": "openable"
        },
        {
          "predicate_id": "closed",
          "variable": "e",
          "mutability": "openable"
        }
      ]
    }
  ]
}