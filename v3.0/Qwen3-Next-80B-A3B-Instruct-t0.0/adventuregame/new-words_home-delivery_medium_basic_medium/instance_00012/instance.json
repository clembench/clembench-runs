{
  "game_id": 12,
  "variant": "basic",
  "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can fervan, thium and equadis.\n\nYour goal for this game is: Put the emingly in the atival, the plate on the reforia and the mop on the reforia.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
  "initial_state": [
    "at(kitchen1floor1,kitchen1)",
    "at(pantry1floor1,pantry1)",
    "at(routiced1floor1,routiced1)",
    "at(emood1floor1,emood1)",
    "at(oustion1floor1,oustion1)",
    "at(bedroom1floor1,bedroom1)",
    "at(reforia1,emood1)",
    "at(sidetable1,emood1)",
    "at(counter1,kitchen1)",
    "at(refrigerator1,pantry1)",
    "at(cupboard1,kitchen1)",
    "at(wardrobe1,bedroom1)",
    "at(shelf1,emood1)",
    "at(atival1,pantry1)",
    "at(anird1,routiced1)",
    "at(chair1,emood1)",
    "at(ioness1,bedroom1)",
    "at(attle1,emood1)",
    "at(broom1,oustion1)",
    "at(mop1,oustion1)",
    "at(hetle1,pantry1)",
    "at(apple1,pantry1)",
    "at(banana1,pantry1)",
    "at(opige1,pantry1)",
    "at(guaced1,pantry1)",
    "at(plate1,kitchen1)",
    "at(emingly1,bedroom1)",
    "at(pillow1,bedroom1)",
    "at(player1,bedroom1)",
    "type(kitchen1floor1,floor)",
    "type(pantry1floor1,floor)",
    "type(routiced1floor1,floor)",
    "type(emood1floor1,floor)",
    "type(oustion1floor1,floor)",
    "type(bedroom1floor1,floor)",
    "type(player1,player)",
    "type(reforia1,reforia)",
    "type(sidetable1,sidetable)",
    "type(counter1,counter)",
    "type(refrigerator1,refrigerator)",
    "type(cupboard1,cupboard)",
    "type(wardrobe1,wardrobe)",
    "type(shelf1,shelf)",
    "type(atival1,atival)",
    "type(anird1,anird)",
    "type(chair1,chair)",
    "type(ioness1,ioness)",
    "type(attle1,attle)",
    "type(broom1,broom)",
    "type(mop1,mop)",
    "type(hetle1,hetle)",
    "type(apple1,apple)",
    "type(banana1,banana)",
    "type(opige1,opige)",
    "type(guaced1,guaced)",
    "type(plate1,plate)",
    "type(emingly1,emingly)",
    "type(pillow1,pillow)",
    "room(kitchen1,kitchen)",
    "room(pantry1,pantry)",
    "room(routiced1,routiced)",
    "room(emood1,emood)",
    "room(oustion1,oustion)",
    "room(bedroom1,bedroom)",
    "support(kitchen1floor1)",
    "support(pantry1floor1)",
    "support(routiced1floor1)",
    "support(emood1floor1)",
    "support(oustion1floor1)",
    "support(bedroom1floor1)",
    "support(reforia1)",
    "support(sidetable1)",
    "support(counter1)",
    "support(shelf1)",
    "support(chair1)",
    "support(ioness1)",
    "support(attle1)",
    "on(pillow1,ioness1)",
    "on(emingly1,bedroom1floor1)",
    "on(plate1,kitchen1floor1)",
    "on(mop1,oustion1floor1)",
    "on(broom1,oustion1floor1)",
    "on(anird1,routiced1floor1)",
    "container(refrigerator1)",
    "container(cupboard1)",
    "container(wardrobe1)",
    "container(atival1)",
    "in(guaced1,refrigerator1)",
    "in(opige1,refrigerator1)",
    "in(banana1,refrigerator1)",
    "in(apple1,refrigerator1)",
    "in(hetle1,refrigerator1)",
    "exit(kitchen1,pantry1)",
    "exit(kitchen1,emood1)",
    "exit(kitchen1,routiced1)",
    "exit(pantry1,kitchen1)",
    "exit(routiced1,kitchen1)",
    "exit(routiced1,oustion1)",
    "exit(emood1,kitchen1)",
    "exit(oustion1,routiced1)",
    "exit(bedroom1,routiced1)",
    "exit(routiced1,bedroom1)",
    "receptacle(reforia1)",
    "receptacle(sidetable1)",
    "receptacle(counter1)",
    "receptacle(refrigerator1)",
    "receptacle(cupboard1)",
    "receptacle(wardrobe1)",
    "receptacle(shelf1)",
    "receptacle(atival1)",
    "receptacle(chair1)",
    "receptacle(ioness1)",
    "receptacle(attle1)",
    "openable(refrigerator1)",
    "openable(cupboard1)",
    "openable(wardrobe1)",
    "openable(atival1)",
    "closed(refrigerator1)",
    "closed(cupboard1)",
    "closed(wardrobe1)",
    "closed(atival1)",
    "takeable(anird1)",
    "takeable(broom1)",
    "takeable(mop1)",
    "takeable(hetle1)",
    "takeable(apple1)",
    "takeable(banana1)",
    "takeable(opige1)",
    "takeable(guaced1)",
    "takeable(plate1)",
    "takeable(emingly1)",
    "takeable(pillow1)",
    "movable(anird1)",
    "movable(broom1)",
    "movable(mop1)",
    "movable(hetle1)",
    "movable(apple1)",
    "movable(banana1)",
    "movable(opige1)",
    "movable(guaced1)",
    "movable(plate1)",
    "movable(emingly1)",
    "movable(pillow1)",
    "needs_support(anird1)",
    "needs_support(broom1)",
    "needs_support(mop1)",
    "needs_support(hetle1)",
    "needs_support(apple1)",
    "needs_support(banana1)",
    "needs_support(opige1)",
    "needs_support(guaced1)",
    "needs_support(plate1)",
    "needs_support(emingly1)",
    "needs_support(pillow1)"
  ],
  "goal_state": [
    "in(emingly1,atival1)",
    "on(plate1,reforia1)",
    "on(mop1,reforia1)"
  ],
  "max_turns": 50,
  "optimal_turns": 18,
  "optimal_solution": [
    [
      "take",
      "emingly1"
    ],
    [
      "go",
      "routiced1"
    ],
    [
      "go",
      "oustion1"
    ],
    [
      "take",
      "mop1"
    ],
    [
      "go",
      "routiced1"
    ],
    [
      "go",
      "kitchen1"
    ],
    [
      "take",
      "plate1"
    ],
    [
      "go",
      "pantry1"
    ],
    [
      "open",
      "atival1"
    ],
    [
      "go",
      "kitchen1"
    ],
    [
      "go",
      "emood1"
    ],
    [
      "put",
      "plate1",
      "reforia1"
    ],
    [
      "go",
      "kitchen1"
    ],
    [
      "go",
      "emood1"
    ],
    [
      "put",
      "mop1",
      "reforia1"
    ],
    [
      "go",
      "kitchen1"
    ],
    [
      "go",
      "pantry1"
    ],
    [
      "put",
      "emingly1",
      "atival1"
    ]
  ],
  "optimal_commands": [
    "take emingly",
    "go routiced",
    "go oustion",
    "take mop",
    "go routiced",
    "go kitchen",
    "take plate",
    "go pantry",
    "open atival",
    "go kitchen",
    "go emood",
    "put plate on reforia",
    "go kitchen",
    "go emood",
    "put mop on reforia",
    "go kitchen",
    "go pantry",
    "put emingly in atival"
  ],
  "action_definitions": [
    {
      "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
      "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
      "pddl_parameter_mapping": {
        "?e": [
          "arg1"
        ],
        "?r": [
          "current_player_room"
        ],
        "?p": [
          "player"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "{{ e }} is not openable.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ],
          [
            "The {{ e }} is not closed.",
            "entity_state_mismatch"
          ]
        ]
      },
      "success_feedback": "The {{ e }} is now open. {{ container_content }}",
      "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
      "epistemic": true,
      "pragmatic": true,
      "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
      "type_name": "open"
    },
    {
      "lark": "close: CLOSE thing\nCLOSE.1: \"fervan\" WS",
      "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
      "pddl_parameter_mapping": {
        "?e": [
          "arg1"
        ],
        "?r": [
          "current_player_room"
        ],
        "?p": [
          "player"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "{{ e }} is not openable.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ],
          [
            "The {{ e }} is not open.",
            "entity_state_mismatch"
          ]
        ]
      },
      "success_feedback": "The {{ e }} is now closed.",
      "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
      "epistemic": false,
      "pragmatic": false,
      "explanation": "To fervan is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
      "new_word": "fervan",
      "type_name": "close"
    },
    {
      "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"thium\" WS",
      "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
      "pddl_parameter_mapping": {
        "?e": [
          "arg1"
        ],
        "?s": [
          "arg2",
          "arg1_receptacle"
        ],
        "?p": [
          "player"
        ],
        "?i": [
          "inventory"
        ],
        "?r": [
          "current_player_room"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "{{ e }} is not takeable.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ s }} is not a receptacle.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ i }} is not an inventory. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ],
          [
            "The {{ e }} is already in your inventory.",
            "entity_already_inventory"
          ],
          [
            "You can't see a {{ s }} here.",
            "entity_not_accessible"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ],
          [
            "The {{ e }} is not on the {{ s }}.",
            "entity_state_mismatch"
          ],
          [
            "The {{ s }} is not a support.",
            "entity_trait_mismatch"
          ],
          [
            "The {{ s }} is not open.",
            "entity_state_mismatch"
          ],
          [
            "The {{ s }} is not a container.",
            "entity_trait_mismatch"
          ],
          [
            "The {{ e }} is not in the {{ s }}.",
            "entity_state_mismatch"
          ]
        ]
      },
      "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
      "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
      "epistemic": false,
      "pragmatic": true,
      "explanation": "To thium is to get something into one's hands, possession or control.",
      "new_word": "thium",
      "type_name": "take"
    },
    {
      "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"equadis\" WS",
      "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
      "pddl_parameter_mapping": {
        "?e": [
          "arg1"
        ],
        "?t": [
          "arg2"
        ],
        "?p": [
          "player"
        ],
        "?i": [
          "inventory"
        ],
        "?r": [
          "current_player_room"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "{{ e }} is not moveable.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ t }} is not a receptacle.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ i }} is not an inventory. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ],
          [
            "You can't see a {{ t }} here.",
            "entity_not_accessible"
          ],
          [
            "The {{ t }} is not a container.",
            "entity_trait_mismatch"
          ],
          [
            "The {{ t }} is not open.",
            "entity_state_mismatch"
          ],
          [
            "The {{ t }} is not a support.",
            "entity_trait_mismatch"
          ]
        ]
      },
      "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
      "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
      "epistemic": false,
      "pragmatic": true,
      "explanation": "To equadis is to physically place something somewhere.",
      "new_word": "equadis",
      "type_name": "put"
    },
    {
      "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
      "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
      "pddl_parameter_mapping": {
        "?c": [
          "current_player_room"
        ],
        "?d": [
          "arg1"
        ],
        "?p": [
          "player"
        ],
        "?i": [
          "inventory"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "{{ c }} is not a room.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ d }} is not a room.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ i }} is not an inventory. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You are already in the {{ d }}.",
            "going_to_current_room"
          ],
          [
            "You can't go to a {{ d }} from here.",
            "no_exit_to"
          ]
        ]
      },
      "success_feedback": "{{ room_desc }}",
      "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
      "epistemic": true,
      "pragmatic": true,
      "explanation": "To VERB is to move through space, especially to a place.",
      "type_name": "go"
    },
    {
      "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
      "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
      "pddl_parameter_mapping": {
        "?p": [
          "player"
        ],
        "?r": [
          "current_player_room"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ]
        ]
      },
      "success_feedback": "You consider yourself done.",
      "asp": "",
      "epistemic": false,
      "pragmatic": true,
      "explanation": "To VERB is to end the game.",
      "type_name": "done"
    },
    {
      "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
      "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
      "pddl_parameter_mapping": {
        "?p": [
          "player"
        ],
        "?r": [
          "current_player_room"
        ],
        "?e": [
          "arg1"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ e }} is not an entity. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ],
          [
            "Your inventory is not an entity. (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ]
        ]
      },
      "success_feedback": "{{ arg1_desc }}",
      "asp": "",
      "epistemic": true,
      "pragmatic": false,
      "explanation": "To VERB is to observe or inspect carefully.",
      "type_name": "examine"
    },
    {
      "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
      "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
      "pddl_parameter_mapping": {
        "?p": [
          "player"
        ],
        "?r": [
          "current_player_room"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ]
        ]
      },
      "success_feedback": "{{ room_desc }}",
      "asp": "",
      "epistemic": true,
      "pragmatic": false,
      "explanation": "To VERB is to inspect a room.",
      "type_name": "look"
    }
  ],
  "room_definitions": [
    {
      "repr_str": "kitchen",
      "standard_content": [
        "refrigerator",
        "counter",
        "reforia"
      ],
      "exit_targets": [
        "pantry",
        "emood",
        "routiced"
      ],
      "max_connections": 3,
      "type_name": "kitchen"
    },
    {
      "repr_str": "pantry",
      "standard_content": [
        "refrigerator",
        "shelf",
        "atival"
      ],
      "exit_targets": [
        "kitchen",
        "routiced"
      ],
      "max_connections": 1,
      "type_name": "pantry"
    },
    {
      "repr_str": "routiced",
      "standard_content": [
        "anird"
      ],
      "exit_targets": [
        "kitchen",
        "pantry",
        "emood",
        "oustion"
      ],
      "max_connections": 4,
      "type_name": "routiced"
    },
    {
      "repr_str": "emood",
      "standard_content": [
        "anird",
        "reforia",
        "chair",
        "attle"
      ],
      "exit_targets": [
        "kitchen",
        "routiced"
      ],
      "max_connections": 2,
      "type_name": "emood"
    },
    {
      "repr_str": "oustion",
      "standard_content": [
        "broom"
      ],
      "exit_targets": [
        "routiced"
      ],
      "max_connections": 1,
      "type_name": "oustion"
    },
    {
      "repr_str": "bedroom",
      "standard_content": [
        "ioness",
        "wardrobe"
      ],
      "exit_targets": [
        "emood",
        "routiced"
      ],
      "max_connections": 1,
      "type_name": "bedroom"
    }
  ],
  "entity_definitions": [
    {
      "repr_str": "you",
      "hidden": true,
      "traits": [],
      "type_name": "player"
    },
    {
      "repr_str": "inventory",
      "hidden": true,
      "container": true,
      "traits": [
        "container",
        "receptacle"
      ],
      "type_name": "inventory"
    },
    {
      "repr_str": "floor",
      "hidden": true,
      "support": true,
      "traits": [
        "support",
        "receptacle"
      ],
      "type_name": "floor"
    },
    {
      "repr_str": "reforia",
      "support": true,
      "traits": [
        "support",
        "receptacle"
      ],
      "possible_adjs": [
        "wooden",
        "metal",
        "low",
        "high"
      ],
      "standard_locations": [
        "kitchen",
        "emood"
      ],
      "type_name": "reforia"
    },
    {
      "repr_str": "side table",
      "support": true,
      "traits": [
        "support",
        "receptacle"
      ],
      "possible_adjs": [
        "wooden",
        "metal",
        "small"
      ],
      "standard_locations": [
        "emood",
        "bedroom"
      ],
      "type_name": "sidetable"
    },
    {
      "repr_str": "counter",
      "support": true,
      "traits": [
        "support",
        "receptacle"
      ],
      "possible_adjs": [
        "wooden",
        "metal",
        "low",
        "high"
      ],
      "standard_locations": [
        "kitchen"
      ],
      "type_name": "counter"
    },
    {
      "repr_str": "refrigerator",
      "container": true,
      "openable": true,
      "traits": [
        "container",
        "openable",
        "receptacle"
      ],
      "possible_adjs": [
        "large",
        "fancy"
      ],
      "standard_locations": [
        "kitchen",
        "pantry"
      ],
      "type_name": "refrigerator"
    },
    {
      "repr_str": "cupboard",
      "container": true,
      "openable": true,
      "traits": [
        "container",
        "openable",
        "receptacle"
      ],
      "possible_adjs": [
        "wooden",
        "metal",
        "large",
        "fancy"
      ],
      "standard_locations": [
        "kitchen"
      ],
      "type_name": "cupboard"
    },
    {
      "repr_str": "wardrobe",
      "container": true,
      "openable": true,
      "traits": [
        "container",
        "openable",
        "receptacle"
      ],
      "possible_adjs": [
        "wooden",
        "large",
        "fancy"
      ],
      "standard_locations": [
        "bedroom"
      ],
      "type_name": "wardrobe"
    },
    {
      "repr_str": "shelf",
      "support": true,
      "traits": [
        "support",
        "receptacle"
      ],
      "possible_adjs": [
        "wooden",
        "metal",
        "low",
        "high"
      ],
      "standard_locations": [
        "kitchen",
        "pantry",
        "emood"
      ],
      "type_name": "shelf"
    },
    {
      "repr_str": "atival",
      "container": true,
      "openable": true,
      "traits": [
        "container",
        "openable",
        "receptacle"
      ],
      "possible_adjs": [
        "large",
        "deep"
      ],
      "standard_locations": [
        "pantry"
      ],
      "type_name": "atival"
    },
    {
      "repr_str": "anird",
      "takeable": true,
      "movable": true,
      "supported": true,
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "possible_adjs": [
        "large",
        "small"
      ],
      "standard_locations": [
        "emood",
        "routiced",
        "bedroom"
      ],
      "type_name": "anird"
    },
    {
      "repr_str": "chair",
      "support": true,
      "traits": [
        "support",
        "receptacle"
      ],
      "possible_adjs": [
        "comfy",
        "wooden",
        "padded"
      ],
      "standard_locations": [
        "emood"
      ],
      "type_name": "chair"
    },
    {
      "repr_str": "ioness",
      "support": true,
      "traits": [
        "support",
        "receptacle"
      ],
      "possible_adjs": [
        "comfy",
        "wooden"
      ],
      "standard_locations": [
        "bedroom"
      ],
      "type_name": "ioness"
    },
    {
      "repr_str": "attle",
      "support": true,
      "traits": [
        "support",
        "receptacle"
      ],
      "possible_adjs": [
        "comfy",
        "wooden",
        "padded"
      ],
      "standard_locations": [
        "emood"
      ],
      "type_name": "attle"
    },
    {
      "repr_str": "broom",
      "takeable": true,
      "movable": true,
      "supported": true,
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "oustion"
      ],
      "type_name": "broom"
    },
    {
      "repr_str": "mop",
      "takeable": true,
      "movable": true,
      "supported": true,
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "oustion"
      ],
      "type_name": "mop"
    },
    {
      "repr_str": "hetle",
      "takeable": true,
      "movable": true,
      "supported": true,
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "kitchen",
        "pantry"
      ],
      "type_name": "hetle"
    },
    {
      "repr_str": "apple",
      "takeable": true,
      "movable": true,
      "supported": true,
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "kitchen",
        "pantry"
      ],
      "type_name": "apple"
    },
    {
      "repr_str": "banana",
      "takeable": true,
      "movable": true,
      "supported": true,
      "possible_adjs": [
        "ripe",
        "jelly"
      ],
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "kitchen",
        "pantry"
      ],
      "type_name": "banana"
    },
    {
      "repr_str": "opige",
      "takeable": true,
      "movable": true,
      "supported": true,
      "possible_adjs": [
        "ripe",
        "fresh"
      ],
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "kitchen",
        "pantry"
      ],
      "type_name": "opige"
    },
    {
      "repr_str": "guaced",
      "takeable": true,
      "movable": true,
      "supported": true,
      "possible_adjs": [
        "ripe",
        "fresh"
      ],
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "kitchen",
        "pantry"
      ],
      "type_name": "guaced"
    },
    {
      "repr_str": "plate",
      "takeable": true,
      "movable": true,
      "supported": true,
      "possible_adjs": [
        "ceramic",
        "glass"
      ],
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "kitchen"
      ],
      "type_name": "plate"
    },
    {
      "repr_str": "emingly",
      "takeable": true,
      "movable": true,
      "supported": true,
      "possible_adjs": [
        "old",
        "thin"
      ],
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "emood",
        "bedroom"
      ],
      "type_name": "emingly"
    },
    {
      "repr_str": "pillow",
      "takeable": true,
      "movable": true,
      "supported": true,
      "possible_adjs": [
        "down",
        "small"
      ],
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "bedroom"
      ],
      "type_name": "pillow"
    }
  ],
  "domain_definitions": [
    {
      "domain_id": "partial_new_words",
      "types": {
        "room": [
          "kitchen",
          "pantry",
          "routiced",
          "emood",
          "oustion",
          "bedroom"
        ],
        "entity": [
          "player",
          "inventory",
          "floor",
          "player",
          "inventory",
          "floor",
          "reforia",
          "sidetable",
          "counter",
          "refrigerator",
          "cupboard",
          "wardrobe",
          "shelf",
          "atival",
          "anird",
          "chair",
          "ioness",
          "attle",
          "broom",
          "mop",
          "hetle",
          "apple",
          "banana",
          "opige",
          "guaced",
          "plate",
          "emingly",
          "pillow"
        ],
        "container": [
          "inventory",
          "refrigerator",
          "cupboard",
          "wardrobe",
          "atival"
        ],
        "receptacle": [
          "inventory",
          "floor",
          "reforia",
          "sidetable",
          "counter",
          "refrigerator",
          "cupboard",
          "wardrobe",
          "shelf",
          "atival",
          "chair",
          "ioness",
          "attle"
        ],
        "support": [
          "floor",
          "reforia",
          "sidetable",
          "counter",
          "shelf",
          "chair",
          "ioness",
          "attle"
        ],
        "openable": [
          "refrigerator",
          "cupboard",
          "wardrobe",
          "atival"
        ],
        "takeable": [
          "anird",
          "broom",
          "mop",
          "hetle",
          "apple",
          "banana",
          "opige",
          "guaced",
          "plate",
          "emingly",
          "pillow"
        ],
        "movable": [
          "anird",
          "broom",
          "mop",
          "hetle",
          "apple",
          "banana",
          "opige",
          "guaced",
          "plate",
          "emingly",
          "pillow"
        ],
        "needs_support": [
          "anird",
          "broom",
          "mop",
          "hetle",
          "apple",
          "banana",
          "opige",
          "guaced",
          "plate",
          "emingly",
          "pillow"
        ]
      },
      "predicates": [
        {
          "predicate_id": "open",
          "variable": "e",
          "mutability": "openable"
        },
        {
          "predicate_id": "closed",
          "variable": "e",
          "mutability": "openable"
        }
      ]
    }
  ]
}