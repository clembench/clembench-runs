{
  "game_id": 14,
  "variant": "basic",
  "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can anumman, phinding, llatic, eoster, ntion and cumative.\n\nYour goal for this game is: Make the bintioust atilioned, the forotoly serhing and the retritt aurpher.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
  "initial_state": [
    "at(torifism1,rofflum1)",
    "at(sancyter1,iciante1)",
    "at(retritt1,realighy1)",
    "at(avirriced1,realighy1)",
    "at(iscolad1,realighy1)",
    "at(urafflag1,realighy1)",
    "at(shemood1,realighy1)",
    "at(bintioust1,llism1)",
    "at(harantal1,rofflum1)",
    "at(forotoly1,realighy1)",
    "at(player1,realighy1)",
    "type(player1,player)",
    "type(forotoly1,forotoly)",
    "type(harantal1,harantal)",
    "type(bintioust1,bintioust)",
    "type(shemood1,shemood)",
    "type(urafflag1,urafflag)",
    "type(iscolad1,iscolad)",
    "type(avirriced1,avirriced)",
    "type(retritt1,retritt)",
    "type(sancyter1,sancyter)",
    "type(torifism1,torifism)",
    "room(rofflum1,rofflum)",
    "room(iciante1,iciante)",
    "room(llism1,llism)",
    "room(realighy1,realighy)",
    "atilioned(sancyter1)",
    "atilioned(avirriced1)",
    "atilioned(iscolad1)",
    "atilioned(urafflag1)",
    "rapicary(shemood1)",
    "rapicary(bintioust1)",
    "aurpher(torifism1)",
    "chlectic(shemood1)",
    "llike(retritt1)",
    "exit(rofflum1,iciante1)",
    "exit(iciante1,rofflum1)",
    "exit(llism1,iciante1)",
    "exit(realighy1,rofflum1)",
    "exit(rofflum1,realighy1)",
    "exit(iciante1,llism1)",
    "serhing_able(forotoly1)",
    "serhing_able(harantal1)",
    "serhing_able(bintioust1)",
    "serhing_able(urafflag1)",
    "serhing_able(retritt1)",
    "serhing_able(sancyter1)",
    "atilioned_able(bintioust1)",
    "atilioned_able(shemood1)",
    "atilioned_able(urafflag1)",
    "atilioned_able(iscolad1)",
    "atilioned_able(avirriced1)",
    "atilioned_able(sancyter1)",
    "aurpher_able(shemood1)",
    "aurpher_able(retritt1)",
    "aurpher_able(torifism1)"
  ],
  "goal_state": [
    "serhing(forotoly1)",
    "atilioned(bintioust1)",
    "aurpher(retritt1)"
  ],
  "max_turns": 50,
  "optimal_turns": 6,
  "optimal_solution": [
    [
      "ntion",
      "forotoly1"
    ],
    [
      "phinding",
      "retritt1"
    ],
    [
      "go",
      "rofflum1"
    ],
    [
      "go",
      "iciante1"
    ],
    [
      "go",
      "llism1"
    ],
    [
      "eoster",
      "bintioust1"
    ]
  ],
  "optimal_commands": [
    "ntion forotoly",
    "phinding retritt",
    "go rofflum",
    "go iciante",
    "go llism",
    "eoster bintioust"
  ],
  "action_definitions": [
    {
      "lark": "ntion: NTION thing\nNTION.1: \"ntion\" WS",
      "pddl": "(:action NTION\n    :parameters (?e - serhing_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n)\n    :effect (and\n        (serhing ?e)\n    )\n)",
      "pddl_parameter_mapping": {
        "?e": [
          "arg1"
        ],
        "?r": [
          "current_player_room"
        ],
        "?p": [
          "player"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "The {{ e }} is not serhing-able.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ]
        ]
      },
      "success_feedback": "The {{ e }} is now serhing.",
      "epistemic": false,
      "pragmatic": true,
      "explanation": "To ntion is to make something serhing_able serhing.",
      "asp": "{ action_t(TURN,ntion,THING):at_t(TURN,THING,ROOM),serhing_able(THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nserhing_t(TURN+1,THING) :- action_t(TURN,ntion,THING).\nserhing_t(TURN+1,THING) :- turn(TURN), serhing_t(TURN,THING).",
      "type_name": "ntion"
    },
    {
      "lark": "anumman: ANUMMAN thing\nANUMMAN.1: \"anumman\" WS",
      "pddl": "(:action ANUMMAN\n    :parameters (?e - atilioned_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (atilioned ?e)\n        )\n    :effect (and\n        (rapicary ?e)\n        (not (atilioned ?e))\n    )\n)",
      "pddl_parameter_mapping": {
        "?e": [
          "arg1"
        ],
        "?r": [
          "current_player_room"
        ],
        "?p": [
          "player"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "The {{ e }} is not atilioned-able.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ],
          [
            "The {{ e }} is not atilioned.",
            "entity_state_mismatch"
          ]
        ]
      },
      "success_feedback": "The {{ e }} is now rapicary.",
      "epistemic": false,
      "pragmatic": true,
      "explanation": "To anumman is to make something atilioned_able and atilioned be rapicary.",
      "asp": "{ action_t(TURN,anumman,THING):at_t(TURN,THING,ROOM),atilioned_able(THING),atilioned_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nrapicary_t(TURN+1,THING) :- action_t(TURN,anumman,THING).\natilioned_t(TURN+1,THING) :- turn(TURN), atilioned_t(TURN,THING), not action_t(TURN,anumman,THING).",
      "type_name": "anumman"
    },
    {
      "lark": "eoster: EOSTER thing\nEOSTER.1: \"eoster\" WS",
      "pddl": "(:action EOSTER\n    :parameters (?e - atilioned_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (rapicary ?e)\n        )\n    :effect (and\n        (atilioned ?e)\n        (not (rapicary ?e))\n    )\n)",
      "pddl_parameter_mapping": {
        "?e": [
          "arg1"
        ],
        "?r": [
          "current_player_room"
        ],
        "?p": [
          "player"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "The {{ e }} is not atilioned-able.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ],
          [
            "The {{ e }} is not rapicary.",
            "entity_state_mismatch"
          ]
        ]
      },
      "success_feedback": "The {{ e }} is now atilioned.",
      "epistemic": false,
      "pragmatic": true,
      "explanation": "To eoster is to make something atilioned_able and rapicary be atilioned.",
      "asp": "{ action_t(TURN,eoster,THING):at_t(TURN,THING,ROOM),atilioned_able(THING),rapicary_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\natilioned_t(TURN+1,THING) :- action_t(TURN,eoster,THING).\nrapicary_t(TURN+1,THING) :- turn(TURN), rapicary_t(TURN,THING), not action_t(TURN,eoster,THING).",
      "type_name": "eoster"
    },
    {
      "lark": "llatic: LLATIC thing\nLLATIC.1: \"llatic\" WS",
      "pddl": "(:action LLATIC\n    :parameters (?e - aurpher_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (aurpher ?e)\n        )\n    :effect (and\n        (chlectic ?e)\n        (not (aurpher ?e))\n    )\n)",
      "pddl_parameter_mapping": {
        "?e": [
          "arg1"
        ],
        "?r": [
          "current_player_room"
        ],
        "?p": [
          "player"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "The {{ e }} is not aurpher-able.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ],
          [
            "The {{ e }} is not aurpher.",
            "entity_state_mismatch"
          ]
        ]
      },
      "success_feedback": "The {{ e }} is now chlectic.",
      "epistemic": false,
      "pragmatic": true,
      "explanation": "To llatic is to make something aurpher_able and aurpher be chlectic.",
      "asp": "{ action_t(TURN,llatic,THING):at_t(TURN,THING,ROOM),aurpher_able(THING),aurpher_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nchlectic_t(TURN+1,THING) :- action_t(TURN,llatic,THING).\naurpher_t(TURN+1,THING) :- turn(TURN), aurpher_t(TURN,THING), not action_t(TURN,llatic,THING).",
      "type_name": "llatic"
    },
    {
      "lark": "cumative: CUMATIVE thing\nCUMATIVE.1: \"cumative\" WS",
      "pddl": "(:action CUMATIVE\n    :parameters (?e - aurpher_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (chlectic ?e)\n        )\n    :effect (and\n        (llike ?e)\n        (not (chlectic ?e))\n    )\n)",
      "pddl_parameter_mapping": {
        "?e": [
          "arg1"
        ],
        "?r": [
          "current_player_room"
        ],
        "?p": [
          "player"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "The {{ e }} is not aurpher-able.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ],
          [
            "The {{ e }} is not chlectic.",
            "entity_state_mismatch"
          ]
        ]
      },
      "success_feedback": "The {{ e }} is now llike.",
      "epistemic": false,
      "pragmatic": true,
      "explanation": "To cumative is to make something aurpher_able and chlectic be llike.",
      "asp": "{ action_t(TURN,cumative,THING):at_t(TURN,THING,ROOM),aurpher_able(THING),chlectic_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nllike_t(TURN+1,THING) :- action_t(TURN,cumative,THING).\nchlectic_t(TURN+1,THING) :- turn(TURN), chlectic_t(TURN,THING), not action_t(TURN,cumative,THING).",
      "type_name": "cumative"
    },
    {
      "lark": "phinding: PHINDING thing\nPHINDING.1: \"phinding\" WS",
      "pddl": "(:action PHINDING\n    :parameters (?e - aurpher_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (llike ?e)\n        )\n    :effect (and\n        (aurpher ?e)\n        (not (llike ?e))\n    )\n)",
      "pddl_parameter_mapping": {
        "?e": [
          "arg1"
        ],
        "?r": [
          "current_player_room"
        ],
        "?p": [
          "player"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "The {{ e }} is not aurpher-able.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ],
          [
            "The {{ e }} is not llike.",
            "entity_state_mismatch"
          ]
        ]
      },
      "success_feedback": "The {{ e }} is now aurpher.",
      "epistemic": false,
      "pragmatic": true,
      "explanation": "To phinding is to make something aurpher_able and llike be aurpher.",
      "asp": "{ action_t(TURN,phinding,THING):at_t(TURN,THING,ROOM),aurpher_able(THING),llike_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\naurpher_t(TURN+1,THING) :- action_t(TURN,phinding,THING).\nllike_t(TURN+1,THING) :- turn(TURN), llike_t(TURN,THING), not action_t(TURN,phinding,THING).",
      "type_name": "phinding"
    },
    {
      "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
      "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player)\n    :precondition (and\n        (at ?p ?c)\n        (exit ?c ?d)\n        (not (at ?p ?d))\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n    )\n)",
      "pddl_parameter_mapping": {
        "?c": [
          "current_player_room"
        ],
        "?d": [
          "arg1"
        ],
        "?p": [
          "player"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "{{ c }} is not a room.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ d }} is not a room.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You can't go to a {{ d }} from here.",
            "no_exit_to"
          ],
          [
            "You are already in the {{ d }}.",
            "going_to_current_room"
          ]
        ]
      },
      "success_feedback": "{{ room_desc }}",
      "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not THING = player1.",
      "epistemic": true,
      "pragmatic": true,
      "explanation": "To VERB is to move through space, especially to a place.",
      "type_name": "go"
    },
    {
      "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
      "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
      "pddl_parameter_mapping": {
        "?p": [
          "player"
        ],
        "?r": [
          "current_player_room"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ]
        ]
      },
      "success_feedback": "You consider yourself done.",
      "asp": "",
      "epistemic": false,
      "pragmatic": true,
      "explanation": "To VERB is to end the game.",
      "type_name": "done"
    },
    {
      "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
      "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
      "pddl_parameter_mapping": {
        "?p": [
          "player"
        ],
        "?r": [
          "current_player_room"
        ],
        "?e": [
          "arg1"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ e }} is not an entity. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ],
          [
            "Your inventory is not an entity. (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ]
        ]
      },
      "success_feedback": "{{ arg1_desc }}",
      "asp": "",
      "epistemic": true,
      "pragmatic": false,
      "explanation": "To VERB is to observe or inspect carefully.",
      "type_name": "examine"
    },
    {
      "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
      "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
      "pddl_parameter_mapping": {
        "?p": [
          "player"
        ],
        "?r": [
          "current_player_room"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ]
        ]
      },
      "success_feedback": "{{ room_desc }}",
      "asp": "",
      "epistemic": true,
      "pragmatic": false,
      "explanation": "To VERB is to inspect a room.",
      "type_name": "look"
    }
  ],
  "room_definitions": [
    {
      "repr_str": "rofflum",
      "exit_targets": [
        "llism",
        "iciante"
      ],
      "max_connections": 1,
      "type_name": "rofflum"
    },
    {
      "repr_str": "iciante",
      "exit_targets": [
        "rofflum"
      ],
      "max_connections": 3,
      "type_name": "iciante"
    },
    {
      "repr_str": "llism",
      "exit_targets": [
        "iciante",
        "realighy"
      ],
      "max_connections": 2,
      "type_name": "llism"
    },
    {
      "repr_str": "realighy",
      "exit_targets": [
        "llism",
        "iciante",
        "rofflum"
      ],
      "max_connections": 2,
      "type_name": "realighy"
    }
  ],
  "entity_definitions": [
    {
      "repr_str": "forotoly",
      "traits": [
        "serhing_able"
      ],
      "standard_locations": [
        "iciante",
        "realighy"
      ],
      "type_name": "forotoly"
    },
    {
      "repr_str": "harantal",
      "traits": [
        "serhing_able"
      ],
      "standard_locations": [
        "rofflum"
      ],
      "type_name": "harantal"
    },
    {
      "repr_str": "bintioust",
      "traits": [
        "atilioned_able",
        "serhing_able"
      ],
      "standard_locations": [
        "realighy",
        "llism"
      ],
      "type_name": "bintioust"
    },
    {
      "repr_str": "shemood",
      "traits": [
        "atilioned_able",
        "aurpher_able"
      ],
      "standard_locations": [
        "realighy"
      ],
      "type_name": "shemood"
    },
    {
      "repr_str": "urafflag",
      "traits": [
        "atilioned_able",
        "serhing_able"
      ],
      "standard_locations": [
        "realighy",
        "iciante"
      ],
      "type_name": "urafflag"
    },
    {
      "repr_str": "iscolad",
      "traits": [
        "atilioned_able"
      ],
      "standard_locations": [
        "rofflum",
        "realighy"
      ],
      "type_name": "iscolad"
    },
    {
      "repr_str": "avirriced",
      "traits": [
        "atilioned_able"
      ],
      "standard_locations": [
        "realighy"
      ],
      "type_name": "avirriced"
    },
    {
      "repr_str": "retritt",
      "traits": [
        "aurpher_able",
        "serhing_able"
      ],
      "standard_locations": [
        "realighy"
      ],
      "type_name": "retritt"
    },
    {
      "repr_str": "sancyter",
      "traits": [
        "serhing_able",
        "atilioned_able"
      ],
      "standard_locations": [
        "iciante"
      ],
      "type_name": "sancyter"
    },
    {
      "repr_str": "torifism",
      "traits": [
        "aurpher_able"
      ],
      "standard_locations": [
        "rofflum",
        "llism"
      ],
      "type_name": "torifism"
    },
    {
      "repr_str": "you",
      "traits": [],
      "hidden": true,
      "type_name": "player"
    },
    {
      "repr_str": "",
      "traits": [],
      "hidden": true,
      "type_name": "inventory"
    },
    {
      "repr_str": "",
      "traits": [],
      "hidden": true,
      "type_name": "floor"
    }
  ],
  "domain_definitions": [
    {
      "domain_id": "new_words",
      "types": {
        "room": [
          "rofflum",
          "iciante",
          "llism",
          "realighy"
        ],
        "entity": [
          "player",
          "inventory",
          "floor",
          "forotoly",
          "harantal",
          "bintioust",
          "shemood",
          "urafflag",
          "iscolad",
          "avirriced",
          "retritt",
          "sancyter",
          "torifism",
          "player",
          "inventory",
          "floor"
        ],
        "serhing_able": [
          "forotoly",
          "harantal",
          "bintioust",
          "urafflag",
          "retritt",
          "sancyter"
        ],
        "atilioned_able": [
          "bintioust",
          "shemood",
          "urafflag",
          "iscolad",
          "avirriced",
          "sancyter"
        ],
        "aurpher_able": [
          "shemood",
          "retritt",
          "torifism"
        ]
      },
      "predicates": [
        {
          "predicate_id": "serhing",
          "variable": "e",
          "mutability": "serhing_able"
        },
        {
          "predicate_id": "atilioned",
          "variable": "e",
          "mutability": "atilioned_able"
        },
        {
          "predicate_id": "rapicary",
          "variable": "e",
          "mutability": "atilioned_able"
        },
        {
          "predicate_id": "aurpher",
          "variable": "e",
          "mutability": "aurpher_able"
        },
        {
          "predicate_id": "chlectic",
          "variable": "e",
          "mutability": "aurpher_able"
        },
        {
          "predicate_id": "llike",
          "variable": "e",
          "mutability": "aurpher_able"
        }
      ]
    }
  ]
}