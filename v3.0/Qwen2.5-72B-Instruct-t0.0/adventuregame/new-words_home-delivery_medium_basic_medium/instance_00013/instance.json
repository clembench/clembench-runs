{
  "game_id": 13,
  "variant": "basic",
  "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can itink, clogery and ambint.\n\nYour goal for this game is: Put the venism in the cunad, the book on the ciot and the plate on the ciot.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
  "initial_state": [
    "at(rotont1floor1,rotont1)",
    "at(pantry1floor1,pantry1)",
    "at(toxist1floor1,toxist1)",
    "at(livingroom1floor1,livingroom1)",
    "at(herper1floor1,herper1)",
    "at(bedroom1floor1,bedroom1)",
    "at(table1,livingroom1)",
    "at(ciot1,livingroom1)",
    "at(elloust1,rotont1)",
    "at(cunad1,pantry1)",
    "at(upbes1,rotont1)",
    "at(wardrobe1,bedroom1)",
    "at(ially1,livingroom1)",
    "at(onser1,pantry1)",
    "at(pottedplant1,toxist1)",
    "at(chair1,livingroom1)",
    "at(bed1,bedroom1)",
    "at(couch1,livingroom1)",
    "at(broom1,herper1)",
    "at(mop1,herper1)",
    "at(sandwich1,pantry1)",
    "at(apple1,pantry1)",
    "at(everced1,pantry1)",
    "at(mellum1,pantry1)",
    "at(peach1,pantry1)",
    "at(plate1,rotont1)",
    "at(book1,bedroom1)",
    "at(venism1,bedroom1)",
    "at(player1,bedroom1)",
    "type(rotont1floor1,floor)",
    "type(pantry1floor1,floor)",
    "type(toxist1floor1,floor)",
    "type(livingroom1floor1,floor)",
    "type(herper1floor1,floor)",
    "type(bedroom1floor1,floor)",
    "type(player1,player)",
    "type(table1,table)",
    "type(ciot1,ciot)",
    "type(elloust1,elloust)",
    "type(cunad1,cunad)",
    "type(upbes1,upbes)",
    "type(wardrobe1,wardrobe)",
    "type(ially1,ially)",
    "type(onser1,onser)",
    "type(pottedplant1,pottedplant)",
    "type(chair1,chair)",
    "type(bed1,bed)",
    "type(couch1,couch)",
    "type(broom1,broom)",
    "type(mop1,mop)",
    "type(sandwich1,sandwich)",
    "type(apple1,apple)",
    "type(everced1,everced)",
    "type(mellum1,mellum)",
    "type(peach1,peach)",
    "type(plate1,plate)",
    "type(book1,book)",
    "type(venism1,venism)",
    "room(rotont1,rotont)",
    "room(pantry1,pantry)",
    "room(toxist1,toxist)",
    "room(livingroom1,livingroom)",
    "room(herper1,herper)",
    "room(bedroom1,bedroom)",
    "support(rotont1floor1)",
    "support(pantry1floor1)",
    "support(toxist1floor1)",
    "support(livingroom1floor1)",
    "support(herper1floor1)",
    "support(bedroom1floor1)",
    "support(table1)",
    "support(ciot1)",
    "support(elloust1)",
    "support(ially1)",
    "support(chair1)",
    "support(bed1)",
    "support(couch1)",
    "on(venism1,bed1)",
    "on(book1,bedroom1floor1)",
    "on(plate1,rotont1floor1)",
    "on(mop1,herper1floor1)",
    "on(broom1,herper1floor1)",
    "on(pottedplant1,toxist1floor1)",
    "container(cunad1)",
    "container(upbes1)",
    "container(wardrobe1)",
    "container(onser1)",
    "in(peach1,cunad1)",
    "in(mellum1,cunad1)",
    "in(everced1,cunad1)",
    "in(apple1,cunad1)",
    "in(sandwich1,cunad1)",
    "exit(rotont1,pantry1)",
    "exit(rotont1,livingroom1)",
    "exit(rotont1,toxist1)",
    "exit(pantry1,rotont1)",
    "exit(toxist1,rotont1)",
    "exit(toxist1,herper1)",
    "exit(livingroom1,rotont1)",
    "exit(herper1,toxist1)",
    "exit(bedroom1,toxist1)",
    "exit(toxist1,bedroom1)",
    "receptacle(table1)",
    "receptacle(ciot1)",
    "receptacle(elloust1)",
    "receptacle(cunad1)",
    "receptacle(upbes1)",
    "receptacle(wardrobe1)",
    "receptacle(ially1)",
    "receptacle(onser1)",
    "receptacle(chair1)",
    "receptacle(bed1)",
    "receptacle(couch1)",
    "openable(cunad1)",
    "openable(upbes1)",
    "openable(wardrobe1)",
    "openable(onser1)",
    "closed(cunad1)",
    "closed(upbes1)",
    "closed(wardrobe1)",
    "closed(onser1)",
    "takeable(pottedplant1)",
    "takeable(broom1)",
    "takeable(mop1)",
    "takeable(sandwich1)",
    "takeable(apple1)",
    "takeable(everced1)",
    "takeable(mellum1)",
    "takeable(peach1)",
    "takeable(plate1)",
    "takeable(book1)",
    "takeable(venism1)",
    "movable(pottedplant1)",
    "movable(broom1)",
    "movable(mop1)",
    "movable(sandwich1)",
    "movable(apple1)",
    "movable(everced1)",
    "movable(mellum1)",
    "movable(peach1)",
    "movable(plate1)",
    "movable(book1)",
    "movable(venism1)",
    "needs_support(pottedplant1)",
    "needs_support(broom1)",
    "needs_support(mop1)",
    "needs_support(sandwich1)",
    "needs_support(apple1)",
    "needs_support(everced1)",
    "needs_support(mellum1)",
    "needs_support(peach1)",
    "needs_support(plate1)",
    "needs_support(book1)",
    "needs_support(venism1)"
  ],
  "goal_state": [
    "in(venism1,cunad1)",
    "on(book1,ciot1)",
    "on(plate1,ciot1)"
  ],
  "max_turns": 50,
  "optimal_turns": 16,
  "optimal_solution": [
    [
      "take",
      "book1"
    ],
    [
      "take",
      "venism1"
    ],
    [
      "go",
      "toxist1"
    ],
    [
      "go",
      "rotont1"
    ],
    [
      "take",
      "plate1"
    ],
    [
      "go",
      "pantry1"
    ],
    [
      "open",
      "cunad1"
    ],
    [
      "go",
      "rotont1"
    ],
    [
      "go",
      "livingroom1"
    ],
    [
      "put",
      "book1",
      "ciot1"
    ],
    [
      "go",
      "rotont1"
    ],
    [
      "go",
      "pantry1"
    ],
    [
      "put",
      "venism1",
      "cunad1"
    ],
    [
      "go",
      "rotont1"
    ],
    [
      "go",
      "livingroom1"
    ],
    [
      "put",
      "plate1",
      "ciot1"
    ]
  ],
  "optimal_commands": [
    "take book",
    "take venism",
    "go toxist",
    "go rotont",
    "take plate",
    "go pantry",
    "open cunad",
    "go rotont",
    "go living room",
    "put book on ciot",
    "go rotont",
    "go pantry",
    "put venism in cunad",
    "go rotont",
    "go living room",
    "put plate on ciot"
  ],
  "action_definitions": [
    {
      "lark": "open: OPEN thing\nOPEN.1: \"itink\" WS",
      "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
      "pddl_parameter_mapping": {
        "?e": [
          "arg1"
        ],
        "?r": [
          "current_player_room"
        ],
        "?p": [
          "player"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "{{ e }} is not openable.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ],
          [
            "The {{ e }} is not closed.",
            "entity_state_mismatch"
          ]
        ]
      },
      "success_feedback": "The {{ e }} is now open. {{ container_content }}",
      "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
      "epistemic": true,
      "pragmatic": true,
      "explanation": "To itink is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
      "new_word": "itink",
      "type_name": "open"
    },
    {
      "lark": "close: CLOSE thing\nCLOSE.1: \"ambint\" WS",
      "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
      "pddl_parameter_mapping": {
        "?e": [
          "arg1"
        ],
        "?r": [
          "current_player_room"
        ],
        "?p": [
          "player"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "{{ e }} is not openable.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ],
          [
            "The {{ e }} is not open.",
            "entity_state_mismatch"
          ]
        ]
      },
      "success_feedback": "The {{ e }} is now closed.",
      "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
      "epistemic": false,
      "pragmatic": false,
      "explanation": "To ambint is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
      "new_word": "ambint",
      "type_name": "close"
    },
    {
      "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"clogery\" WS",
      "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
      "pddl_parameter_mapping": {
        "?e": [
          "arg1"
        ],
        "?s": [
          "arg2",
          "arg1_receptacle"
        ],
        "?p": [
          "player"
        ],
        "?i": [
          "inventory"
        ],
        "?r": [
          "current_player_room"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "{{ e }} is not takeable.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ s }} is not a receptacle.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ i }} is not an inventory. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ],
          [
            "The {{ e }} is already in your inventory.",
            "entity_already_inventory"
          ],
          [
            "You can't see a {{ s }} here.",
            "entity_not_accessible"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ],
          [
            "The {{ e }} is not on the {{ s }}.",
            "entity_state_mismatch"
          ],
          [
            "The {{ s }} is not a support.",
            "entity_trait_mismatch"
          ],
          [
            "The {{ s }} is not open.",
            "entity_state_mismatch"
          ],
          [
            "The {{ s }} is not a container.",
            "entity_trait_mismatch"
          ],
          [
            "The {{ e }} is not in the {{ s }}.",
            "entity_state_mismatch"
          ]
        ]
      },
      "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
      "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
      "epistemic": false,
      "pragmatic": true,
      "explanation": "To clogery is to get something into one's hands, possession or control.",
      "new_word": "clogery",
      "type_name": "take"
    },
    {
      "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
      "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
      "pddl_parameter_mapping": {
        "?e": [
          "arg1"
        ],
        "?t": [
          "arg2"
        ],
        "?p": [
          "player"
        ],
        "?i": [
          "inventory"
        ],
        "?r": [
          "current_player_room"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "{{ e }} is not moveable.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ t }} is not a receptacle.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ i }} is not an inventory. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ],
          [
            "You can't see a {{ t }} here.",
            "entity_not_accessible"
          ],
          [
            "The {{ t }} is not a container.",
            "entity_trait_mismatch"
          ],
          [
            "The {{ t }} is not open.",
            "entity_state_mismatch"
          ],
          [
            "The {{ t }} is not a support.",
            "entity_trait_mismatch"
          ]
        ]
      },
      "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
      "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
      "epistemic": false,
      "pragmatic": true,
      "explanation": "To VERB is to physically place something somewhere.",
      "type_name": "put"
    },
    {
      "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
      "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
      "pddl_parameter_mapping": {
        "?c": [
          "current_player_room"
        ],
        "?d": [
          "arg1"
        ],
        "?p": [
          "player"
        ],
        "?i": [
          "inventory"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "{{ c }} is not a room.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ d }} is not a room.",
            "domain_trait_type_mismatch"
          ],
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ i }} is not an inventory. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You are already in the {{ d }}.",
            "going_to_current_room"
          ],
          [
            "You can't go to a {{ d }} from here.",
            "no_exit_to"
          ]
        ]
      },
      "success_feedback": "{{ room_desc }}",
      "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
      "epistemic": true,
      "pragmatic": true,
      "explanation": "To VERB is to move through space, especially to a place.",
      "type_name": "go"
    },
    {
      "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
      "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
      "pddl_parameter_mapping": {
        "?p": [
          "player"
        ],
        "?r": [
          "current_player_room"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ]
        ]
      },
      "success_feedback": "You consider yourself done.",
      "asp": "",
      "epistemic": false,
      "pragmatic": true,
      "explanation": "To VERB is to end the game.",
      "type_name": "done"
    },
    {
      "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
      "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
      "pddl_parameter_mapping": {
        "?p": [
          "player"
        ],
        "?r": [
          "current_player_room"
        ],
        "?e": [
          "arg1"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ e }} is not an entity. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ],
          [
            "Your inventory is not an entity. (This should not occur.)",
            "world_state_discrepancy"
          ],
          [
            "You can't see a {{ e }} here.",
            "entity_not_accessible"
          ]
        ]
      },
      "success_feedback": "{{ arg1_desc }}",
      "asp": "",
      "epistemic": true,
      "pragmatic": false,
      "explanation": "To VERB is to observe or inspect carefully.",
      "type_name": "examine"
    },
    {
      "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
      "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
      "pddl_parameter_mapping": {
        "?p": [
          "player"
        ],
        "?r": [
          "current_player_room"
        ]
      },
      "failure_feedback": {
        "parameters": [
          [
            "{{ p }} is not a player. (This should not occur.)",
            "domain_type_discrepancy"
          ],
          [
            "{{ r }} is not a room. (This should not occur.)",
            "domain_type_discrepancy"
          ]
        ],
        "precondition": [
          [
            "You are not where you are! (This should not occur.)",
            "world_state_discrepancy"
          ]
        ]
      },
      "success_feedback": "{{ room_desc }}",
      "asp": "",
      "epistemic": true,
      "pragmatic": false,
      "explanation": "To VERB is to inspect a room.",
      "type_name": "look"
    }
  ],
  "room_definitions": [
    {
      "repr_str": "rotont",
      "standard_content": [
        "cunad",
        "elloust",
        "table"
      ],
      "exit_targets": [
        "pantry",
        "livingroom",
        "toxist"
      ],
      "max_connections": 3,
      "type_name": "rotont"
    },
    {
      "repr_str": "pantry",
      "standard_content": [
        "cunad",
        "ially",
        "onser"
      ],
      "exit_targets": [
        "rotont",
        "toxist"
      ],
      "max_connections": 1,
      "type_name": "pantry"
    },
    {
      "repr_str": "toxist",
      "standard_content": [
        "pottedplant"
      ],
      "exit_targets": [
        "rotont",
        "pantry",
        "livingroom",
        "herper"
      ],
      "max_connections": 4,
      "type_name": "toxist"
    },
    {
      "repr_str": "living room",
      "standard_content": [
        "pottedplant",
        "table",
        "chair",
        "couch"
      ],
      "exit_targets": [
        "rotont",
        "toxist"
      ],
      "max_connections": 2,
      "type_name": "livingroom"
    },
    {
      "repr_str": "herper",
      "standard_content": [
        "broom"
      ],
      "exit_targets": [
        "toxist"
      ],
      "max_connections": 1,
      "type_name": "herper"
    },
    {
      "repr_str": "bedroom",
      "standard_content": [
        "bed",
        "wardrobe"
      ],
      "exit_targets": [
        "livingroom",
        "toxist"
      ],
      "max_connections": 1,
      "type_name": "bedroom"
    }
  ],
  "entity_definitions": [
    {
      "repr_str": "you",
      "hidden": true,
      "traits": [],
      "type_name": "player"
    },
    {
      "repr_str": "inventory",
      "hidden": true,
      "container": true,
      "traits": [
        "container",
        "receptacle"
      ],
      "type_name": "inventory"
    },
    {
      "repr_str": "floor",
      "hidden": true,
      "support": true,
      "traits": [
        "support",
        "receptacle"
      ],
      "type_name": "floor"
    },
    {
      "repr_str": "table",
      "support": true,
      "traits": [
        "support",
        "receptacle"
      ],
      "possible_adjs": [
        "wooden",
        "metal",
        "low",
        "high"
      ],
      "standard_locations": [
        "rotont",
        "livingroom"
      ],
      "type_name": "table"
    },
    {
      "repr_str": "ciot",
      "support": true,
      "traits": [
        "support",
        "receptacle"
      ],
      "possible_adjs": [
        "wooden",
        "metal",
        "small"
      ],
      "standard_locations": [
        "livingroom",
        "bedroom"
      ],
      "type_name": "ciot"
    },
    {
      "repr_str": "elloust",
      "support": true,
      "traits": [
        "support",
        "receptacle"
      ],
      "possible_adjs": [
        "wooden",
        "metal",
        "low",
        "high"
      ],
      "standard_locations": [
        "rotont"
      ],
      "type_name": "elloust"
    },
    {
      "repr_str": "cunad",
      "container": true,
      "openable": true,
      "traits": [
        "container",
        "openable",
        "receptacle"
      ],
      "possible_adjs": [
        "large",
        "fancy"
      ],
      "standard_locations": [
        "rotont",
        "pantry"
      ],
      "type_name": "cunad"
    },
    {
      "repr_str": "upbes",
      "container": true,
      "openable": true,
      "traits": [
        "container",
        "openable",
        "receptacle"
      ],
      "possible_adjs": [
        "wooden",
        "metal",
        "large",
        "fancy"
      ],
      "standard_locations": [
        "rotont"
      ],
      "type_name": "upbes"
    },
    {
      "repr_str": "wardrobe",
      "container": true,
      "openable": true,
      "traits": [
        "container",
        "openable",
        "receptacle"
      ],
      "possible_adjs": [
        "wooden",
        "large",
        "fancy"
      ],
      "standard_locations": [
        "bedroom"
      ],
      "type_name": "wardrobe"
    },
    {
      "repr_str": "ially",
      "support": true,
      "traits": [
        "support",
        "receptacle"
      ],
      "possible_adjs": [
        "wooden",
        "metal",
        "low",
        "high"
      ],
      "standard_locations": [
        "rotont",
        "pantry",
        "livingroom"
      ],
      "type_name": "ially"
    },
    {
      "repr_str": "onser",
      "container": true,
      "openable": true,
      "traits": [
        "container",
        "openable",
        "receptacle"
      ],
      "possible_adjs": [
        "large",
        "deep"
      ],
      "standard_locations": [
        "pantry"
      ],
      "type_name": "onser"
    },
    {
      "repr_str": "potted plant",
      "takeable": true,
      "movable": true,
      "supported": true,
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "possible_adjs": [
        "large",
        "small"
      ],
      "standard_locations": [
        "livingroom",
        "toxist",
        "bedroom"
      ],
      "type_name": "pottedplant"
    },
    {
      "repr_str": "chair",
      "support": true,
      "traits": [
        "support",
        "receptacle"
      ],
      "possible_adjs": [
        "comfy",
        "wooden",
        "padded"
      ],
      "standard_locations": [
        "livingroom"
      ],
      "type_name": "chair"
    },
    {
      "repr_str": "bed",
      "support": true,
      "traits": [
        "support",
        "receptacle"
      ],
      "possible_adjs": [
        "comfy",
        "wooden"
      ],
      "standard_locations": [
        "bedroom"
      ],
      "type_name": "bed"
    },
    {
      "repr_str": "couch",
      "support": true,
      "traits": [
        "support",
        "receptacle"
      ],
      "possible_adjs": [
        "comfy",
        "wooden",
        "padded"
      ],
      "standard_locations": [
        "livingroom"
      ],
      "type_name": "couch"
    },
    {
      "repr_str": "broom",
      "takeable": true,
      "movable": true,
      "supported": true,
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "herper"
      ],
      "type_name": "broom"
    },
    {
      "repr_str": "mop",
      "takeable": true,
      "movable": true,
      "supported": true,
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "herper"
      ],
      "type_name": "mop"
    },
    {
      "repr_str": "sandwich",
      "takeable": true,
      "movable": true,
      "supported": true,
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "rotont",
        "pantry"
      ],
      "type_name": "sandwich"
    },
    {
      "repr_str": "apple",
      "takeable": true,
      "movable": true,
      "supported": true,
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "rotont",
        "pantry"
      ],
      "type_name": "apple"
    },
    {
      "repr_str": "everced",
      "takeable": true,
      "movable": true,
      "supported": true,
      "possible_adjs": [
        "ripe",
        "jelly"
      ],
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "rotont",
        "pantry"
      ],
      "type_name": "everced"
    },
    {
      "repr_str": "mellum",
      "takeable": true,
      "movable": true,
      "supported": true,
      "possible_adjs": [
        "ripe",
        "fresh"
      ],
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "rotont",
        "pantry"
      ],
      "type_name": "mellum"
    },
    {
      "repr_str": "peach",
      "takeable": true,
      "movable": true,
      "supported": true,
      "possible_adjs": [
        "ripe",
        "fresh"
      ],
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "rotont",
        "pantry"
      ],
      "type_name": "peach"
    },
    {
      "repr_str": "plate",
      "takeable": true,
      "movable": true,
      "supported": true,
      "possible_adjs": [
        "ceramic",
        "glass"
      ],
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "rotont"
      ],
      "type_name": "plate"
    },
    {
      "repr_str": "book",
      "takeable": true,
      "movable": true,
      "supported": true,
      "possible_adjs": [
        "old",
        "thin"
      ],
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "livingroom",
        "bedroom"
      ],
      "type_name": "book"
    },
    {
      "repr_str": "venism",
      "takeable": true,
      "movable": true,
      "supported": true,
      "possible_adjs": [
        "down",
        "small"
      ],
      "traits": [
        "takeable",
        "movable",
        "needs_support"
      ],
      "standard_locations": [
        "bedroom"
      ],
      "type_name": "venism"
    }
  ],
  "domain_definitions": [
    {
      "domain_id": "partial_new_words",
      "types": {
        "room": [
          "rotont",
          "pantry",
          "toxist",
          "livingroom",
          "herper",
          "bedroom"
        ],
        "entity": [
          "player",
          "inventory",
          "floor",
          "player",
          "inventory",
          "floor",
          "table",
          "ciot",
          "elloust",
          "cunad",
          "upbes",
          "wardrobe",
          "ially",
          "onser",
          "pottedplant",
          "chair",
          "bed",
          "couch",
          "broom",
          "mop",
          "sandwich",
          "apple",
          "everced",
          "mellum",
          "peach",
          "plate",
          "book",
          "venism"
        ],
        "container": [
          "inventory",
          "cunad",
          "upbes",
          "wardrobe",
          "onser"
        ],
        "receptacle": [
          "inventory",
          "floor",
          "table",
          "ciot",
          "elloust",
          "cunad",
          "upbes",
          "wardrobe",
          "ially",
          "onser",
          "chair",
          "bed",
          "couch"
        ],
        "support": [
          "floor",
          "table",
          "ciot",
          "elloust",
          "ially",
          "chair",
          "bed",
          "couch"
        ],
        "openable": [
          "cunad",
          "upbes",
          "wardrobe",
          "onser"
        ],
        "takeable": [
          "pottedplant",
          "broom",
          "mop",
          "sandwich",
          "apple",
          "everced",
          "mellum",
          "peach",
          "plate",
          "book",
          "venism"
        ],
        "movable": [
          "pottedplant",
          "broom",
          "mop",
          "sandwich",
          "apple",
          "everced",
          "mellum",
          "peach",
          "plate",
          "book",
          "venism"
        ],
        "needs_support": [
          "pottedplant",
          "broom",
          "mop",
          "sandwich",
          "apple",
          "everced",
          "mellum",
          "peach",
          "plate",
          "book",
          "venism"
        ]
      },
      "predicates": [
        {
          "predicate_id": "open",
          "variable": "e",
          "mutability": "openable"
        },
        {
          "predicate_id": "closed",
          "variable": "e",
          "mutability": "openable"
        }
      ]
    }
  ]
}